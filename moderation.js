// ====== COMANDOS DE MODERA√á√ÉO ======
const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const config = require('../config/config');
const database = require('../utils/database');
const permissions = require('../utils/permissions');
const timeParser = require('../utils/timeParser');

module.exports = {
    // Comando de banir
    async ban(message, args) {
        if (!permissions.hasPermission(message.member, PermissionFlagsBits.BanMembers)) {
            return message.reply('‚ùå Voc√™ n√£o tem permiss√£o para banir membros!');
        }

        const target = message.mentions.members.first();
        if (!target) {
            return message.reply('‚ùå Mencione um usu√°rio para banir! Uso: `!ban @usu√°rio [motivo]`');
        }

        if (!target.bannable) {
            return message.reply('‚ùå N√£o posso banir este usu√°rio!');
        }

        const reason = args.slice(1).join(' ') || 'Sem motivo especificado';

        try {
            await target.ban({ reason });
            
            const embed = new EmbedBuilder()
                .setColor(config.COLORS.MODERATION)
                .setTitle('üî® Usu√°rio Banido')
                .addFields(
                    { name: 'Usu√°rio', value: `${target.user.tag}`, inline: true },
                    { name: 'Moderador', value: `${message.author.tag}`, inline: true },
                    { name: 'Motivo', value: reason, inline: false }
                )
                .setTimestamp();

            message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Erro ao banir usu√°rio:', error);
            message.reply('‚ùå Erro ao banir o usu√°rio!');
        }
    },

    // Comando de expulsar
    async kick(message, args) {
        if (!permissions.hasPermission(message.member, PermissionFlagsBits.KickMembers)) {
            return message.reply('‚ùå Voc√™ n√£o tem permiss√£o para expulsar membros!');
        }

        const target = message.mentions.members.first();
        if (!target) {
            return message.reply('‚ùå Mencione um usu√°rio para expulsar! Uso: `!kick @usu√°rio [motivo]`');
        }

        if (!target.kickable) {
            return message.reply('‚ùå N√£o posso expulsar este usu√°rio!');
        }

        const reason = args.slice(1).join(' ') || 'Sem motivo especificado';

        try {
            await target.kick(reason);
            
            const embed = new EmbedBuilder()
                .setColor(config.COLORS.MODERATION)
                .setTitle('üë¢ Usu√°rio Expulso')
                .addFields(
                    { name: 'Usu√°rio', value: `${target.user.tag}`, inline: true },
                    { name: 'Moderador', value: `${message.author.tag}`, inline: true },
                    { name: 'Motivo', value: reason, inline: false }
                )
                .setTimestamp();

            message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Erro ao expulsar usu√°rio:', error);
            message.reply('‚ùå Erro ao expulsar o usu√°rio!');
        }
    },

    // Comando de silenciar
    async mute(message, args) {
        if (!permissions.hasPermission(message.member, PermissionFlagsBits.ModerateMembers)) {
            return message.reply('‚ùå Voc√™ n√£o tem permiss√£o para silenciar membros!');
        }

        const target = message.mentions.members.first();
        if (!target) {
            return message.reply('‚ùå Mencione um usu√°rio para silenciar! Uso: `!mute @usu√°rio [tempo] [motivo]`');
        }

        if (!target.moderatable) {
            return message.reply('‚ùå N√£o posso silenciar este usu√°rio!');
        }

        const timeArg = args[1] || '10';
        const maxMs = 28 * 24 * 60 * 60 * 1000; // 28 dias
        const timeMs = timeParser.parseDuration(timeArg, { maxMs, defaultMs: 10 * 60 * 1000 });
        
        if (!timeMs) {
            return message.reply('‚ùå Formato de tempo inv√°lido! Use: n√∫mero (minutos), 5min, 1h, 2d\nM√°ximo: 28 dias');
        }
        
        const time = timeParser.msToMinutes(timeMs);
        const reason = args.slice(2).join(' ') || 'Sem motivo especificado';

        try {
            await target.timeout(timeMs, reason);
            
            const humanTime = timeParser.humanizeDuration(timeMs);
            const endTimestamp = Math.floor((Date.now() + timeMs) / 1000);
            
            const embed = new EmbedBuilder()
                .setColor(config.COLORS.MODERATION)
                .setTitle('üîá Usu√°rio Silenciado')
                .addFields(
                    { name: 'Usu√°rio', value: `${target.user.tag}`, inline: true },
                    { name: 'Moderador', value: `${message.author.tag}`, inline: true },
                    { name: 'Dura√ß√£o', value: humanTime, inline: true },
                    { name: 'Termina em', value: `<t:${endTimestamp}:R>`, inline: true },
                    { name: 'Motivo', value: reason, inline: false }
                )
                .setTimestamp();

            message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Erro ao silenciar usu√°rio:', error);
            message.reply('‚ùå Erro ao silenciar o usu√°rio!');
        }
    },

    // Comando de dessilenciar
    async unmute(message, args) {
        if (!permissions.hasPermission(message.member, PermissionFlagsBits.ModerateMembers)) {
            return message.reply('‚ùå Voc√™ n√£o tem permiss√£o para dessilenciar membros!');
        }

        const target = message.mentions.members.first();
        if (!target) {
            return message.reply('‚ùå Mencione um usu√°rio para dessilenciar! Uso: `!unmute @usu√°rio [motivo]`');
        }

        if (!target.isCommunicationDisabled()) {
            return message.reply('‚ùå Este usu√°rio n√£o est√° silenciado!');
        }

        const reason = args.slice(1).join(' ') || 'Sem motivo especificado';

        try {
            await target.timeout(null, reason);
            
            const embed = new EmbedBuilder()
                .setColor(config.COLORS.SUCCESS)
                .setTitle('üîä Usu√°rio Dessilenciado')
                .addFields(
                    { name: 'Usu√°rio', value: `${target.user.tag}`, inline: true },
                    { name: 'Moderador', value: `${message.author.tag}`, inline: true },
                    { name: 'Motivo', value: reason, inline: false }
                )
                .setTimestamp();

            message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Erro ao dessilenciar usu√°rio:', error);
            message.reply('‚ùå Erro ao dessilenciar o usu√°rio!');
        }
    },

    // Comando de avisar
    async warn(message, args) {
        if (!permissions.hasPermission(message.member, PermissionFlagsBits.ModerateMembers)) {
            return message.reply('‚ùå Voc√™ n√£o tem permiss√£o para avisar membros!');
        }

        const target = message.mentions.members.first();
        if (!target) {
            return message.reply('‚ùå Mencione um usu√°rio para avisar! Uso: `!warn @usu√°rio [motivo]`');
        }

        const reason = args.slice(1).join(' ') || 'Sem motivo especificado';

        try {
            // Salvar aviso no banco de dados
            const userData = database.getUser(target.id) || { warns: [] };
            userData.warns.push({
                reason,
                moderator: message.author.id,
                timestamp: Date.now()
            });
            database.saveUser(target.id, userData);

            const embed = new EmbedBuilder()
                .setColor(config.COLORS.WARNING)
                .setTitle('‚ö†Ô∏è Usu√°rio Avisado')
                .addFields(
                    { name: 'Usu√°rio', value: `${target.user.tag}`, inline: true },
                    { name: 'Moderador', value: `${message.author.tag}`, inline: true },
                    { name: 'Avisos', value: `${userData.warns.length}/${config.MODERATION.MAX_WARNS}`, inline: true },
                    { name: 'Motivo', value: reason, inline: false }
                )
                .setTimestamp();

            message.reply({ embeds: [embed] });

            // Auto-banir se atingir limite de avisos
            if (userData.warns.length >= config.MODERATION.MAX_WARNS) {
                setTimeout(async () => {
                    try {
                        await target.ban({ reason: 'Limite de avisos atingido' });
                        message.channel.send(`üî® ${target.user.tag} foi banido automaticamente por atingir ${config.MODERATION.MAX_WARNS} avisos!`);
                    } catch (error) {
                        console.error('Erro no auto-ban:', error);
                    }
                }, 2000);
            }

        } catch (error) {
            console.error('Erro ao avisar usu√°rio:', error);
            message.reply('‚ùå Erro ao avisar o usu√°rio!');
        }
    },

    // Comando de limpar mensagens
    async clear(message, args) {
        if (!permissions.hasPermission(message.member, PermissionFlagsBits.ManageMessages)) {
            return message.reply('‚ùå Voc√™ n√£o tem permiss√£o para gerenciar mensagens!');
        }

        const amount = parseInt(args[0]);
        if (!amount || amount < 1 || amount > 100) {
            return message.reply('‚ùå Especifique um n√∫mero entre 1 e 100! Uso: `!clear [quantidade]`');
        }

        try {
            const deleted = await message.channel.bulkDelete(amount + 1, true);
            
            const reply = await message.channel.send(`‚úÖ ${deleted.size - 1} mensagens foram deletadas!`);
            setTimeout(() => reply.delete().catch(() => {}), 5000);

        } catch (error) {
            console.error('Erro ao limpar mensagens:', error);
            message.reply('‚ùå Erro ao limpar as mensagens!');
        }
    },

    // Comando para ver avisos
    async warnings(message, args) {
        const target = message.mentions.members.first() || message.member;
        const userData = database.getUser(target.id);

        if (!userData || !userData.warns || userData.warns.length === 0) {
            return message.reply(`${target.user.tag} n√£o possui avisos!`);
        }

        const embed = new EmbedBuilder()
            .setColor(config.COLORS.WARNING)
            .setTitle(`‚ö†Ô∏è Avisos de ${target.user.tag}`)
            .setDescription(`Total: ${userData.warns.length} avisos`)
            .setTimestamp();

        userData.warns.forEach((warn, index) => {
            embed.addFields({
                name: `Aviso ${index + 1}`,
                value: `**Motivo:** ${warn.reason}\n**Data:** <t:${Math.floor(warn.timestamp / 1000)}:R>`,
                inline: false
            });
        });

        message.reply({ embeds: [embed] });
    },

    // Comando para remover avisos
    async unwarn(message, args) {
        if (!permissions.hasPermission(message.member, PermissionFlagsBits.ModerateMembers)) {
            return message.reply('‚ùå Voc√™ n√£o tem permiss√£o para remover avisos!');
        }

        const target = message.mentions.members.first();
        if (!target) {
            return message.reply('‚ùå Mencione um usu√°rio para remover aviso! Uso: `!unwarn @usu√°rio [n√∫mero_do_aviso | all]`');
        }

        const userData = database.getUser(target.id);
        if (!userData || !userData.warns || userData.warns.length === 0) {
            return message.reply(`${target.user.tag} n√£o possui avisos para remover!`);
        }

        const warnIndex = args[1];
        
        try {
            if (warnIndex === 'all') {
                // Remover todos os avisos
                userData.warns = [];
                database.saveUser(target.id, userData);

                const embed = new EmbedBuilder()
                    .setColor(config.COLORS.SUCCESS)
                    .setTitle('‚úÖ Avisos Removidos')
                    .addFields(
                        { name: 'Usu√°rio', value: `${target.user.tag}`, inline: true },
                        { name: 'Moderador', value: `${message.author.tag}`, inline: true },
                        { name: 'A√ß√£o', value: 'Todos os avisos foram removidos', inline: false }
                    )
                    .setTimestamp();

                message.reply({ embeds: [embed] });
                
            } else {
                // Remover aviso espec√≠fico
                const index = parseInt(warnIndex) - 1;
                
                if (isNaN(index) || index < 0 || index >= userData.warns.length) {
                    return message.reply(`‚ùå N√∫mero de aviso inv√°lido! Use um n√∫mero de 1 a ${userData.warns.length} ou "all" para remover todos.`);
                }

                const removedWarn = userData.warns.splice(index, 1)[0];
                database.saveUser(target.id, userData);

                const embed = new EmbedBuilder()
                    .setColor(config.COLORS.SUCCESS)
                    .setTitle('‚úÖ Aviso Removido')
                    .addFields(
                        { name: 'Usu√°rio', value: `${target.user.tag}`, inline: true },
                        { name: 'Moderador', value: `${message.author.tag}`, inline: true },
                        { name: 'Avisos restantes', value: `${userData.warns.length}`, inline: true },
                        { name: 'Aviso removido', value: removedWarn.reason, inline: false }
                    )
                    .setTimestamp();

                message.reply({ embeds: [embed] });
            }

        } catch (error) {
            console.error('Erro ao remover aviso:', error);
            message.reply('‚ùå Erro ao remover o aviso!');
        }
    }
};
