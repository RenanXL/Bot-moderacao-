// ====== SISTEMA DE REGISTRO ======
const { EmbedBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle } = require('discord.js');
const config = require('../config/config');
const database = require('../utils/database');
const permissions = require('../utils/permissions');

module.exports = {
    // Comando para iniciar registro manual
    async register(message) {
        if (!permissions.hasPermission(message.member, 'MANAGE_GUILD')) {
            return message.reply('‚ùå Voc√™ n√£o tem permiss√£o para usar este comando!');
        }

        await this.sendRegistrationMessage(message.channel);
        message.reply('‚úÖ Mensagem de registro enviada!');
    },

    // Enviar mensagem de registro
    async sendRegistrationMessage(channel, user = null) {
        const embed = new EmbedBuilder()
            .setColor(config.COLORS.INFO)
            .setTitle('üìù Sistema de Registro')
            .setDescription(
                user 
                    ? `Ol√° ${user}! Bem-vindo(a) ao servidor! üéâ\n\nPara ter acesso completo ao servidor, voc√™ precisa se registrar e verificar sua conta.`
                    : 'Para ter acesso completo ao servidor, voc√™ precisa se registrar e verificar sua conta.'
            )
            .addFields(
                { name: 'üìã Como funciona:', value: '1Ô∏è‚É£ Clique em "Registrar"\n2Ô∏è‚É£ Leia as regras\n3Ô∏è‚É£ Clique em "Verificar"\n4Ô∏è‚É£ Receba seu cargo!', inline: false },
                { name: '‚úÖ Benef√≠cios:', value: '‚Ä¢ Acesso a todos os canais\n‚Ä¢ Participar de sorteios\n‚Ä¢ Interagir com a comunidade', inline: false }
            )
            .setFooter({ text: 'Clique no bot√£o abaixo para come√ßar!' })
            .setTimestamp();

        const registerButton = new ButtonBuilder()
            .setCustomId('registration_start')
            .setLabel('üìù Registrar')
            .setStyle(ButtonStyle.Primary);

        const rulesButton = new ButtonBuilder()
            .setCustomId('registration_rules')
            .setLabel('üìú Ver Regras')
            .setStyle(ButtonStyle.Secondary);

        const row = new ActionRowBuilder().addComponents(registerButton, rulesButton);

        try {
            await channel.send({ embeds: [embed], components: [row] });
        } catch (error) {
            console.error('Erro ao enviar mensagem de registro:', error);
        }
    },

    // Processo de registro
    async startRegistration(interaction) {
        const user = interaction.user;
        const member = interaction.member;

        // Verificar se j√° est√° registrado
        const userData = database.getUser(user.id);
        if (userData && userData.registered) {
            return interaction.reply({
                content: '‚úÖ Voc√™ j√° est√° registrado! Se n√£o tem o cargo, clique em "Verificar".',
                ephemeral: true
            });
        }

        const embed = new EmbedBuilder()
            .setColor(config.COLORS.SUCCESS)
            .setTitle('üìù Processo de Registro')
            .setDescription(`${user}, voc√™ est√° iniciando o processo de registro!`)
            .addFields(
                { name: 'üìã Informa√ß√µes importantes:', value: '‚Ä¢ Ao se registrar, voc√™ concorda em seguir as regras do servidor\n‚Ä¢ Comportamento inadequado resultar√° em puni√ß√µes\n‚Ä¢ Respeite todos os membros da comunidade', inline: false },
                { name: 'üéØ Pr√≥ximo passo:', value: 'Clique em "Confirmar Registro" para continuar', inline: false }
            )
            .setFooter({ text: 'Registro em andamento...' })
            .setTimestamp();

        const confirmButton = new ButtonBuilder()
            .setCustomId('registration_confirm')
            .setLabel('‚úÖ Confirmar Registro')
            .setStyle(ButtonStyle.Success);

        const cancelButton = new ButtonBuilder()
            .setCustomId('registration_cancel')
            .setLabel('‚ùå Cancelar')
            .setStyle(ButtonStyle.Danger);

        const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

        await interaction.reply({
            embeds: [embed],
            components: [row],
            ephemeral: true
        });
    },

    // Confirmar registro
    async confirmRegistration(interaction) {
        const user = interaction.user;

        try {
            // Salvar registro no banco de dados
            const userData = database.getUser(user.id) || {};
            userData.registered = true;
            userData.registrationDate = Date.now();
            userData.guildId = interaction.guild.id;
            database.saveUser(user.id, userData);

            const embed = new EmbedBuilder()
                .setColor(config.COLORS.SUCCESS)
                .setTitle('üéâ Registro Conclu√≠do!')
                .setDescription(`Parab√©ns ${user}! Seu registro foi conclu√≠do com sucesso!`)
                .addFields(
                    { name: 'üîπ Status:', value: 'Registrado ‚úÖ', inline: true },
                    { name: 'üîπ Data:', value: new Date().toLocaleDateString('pt-BR'), inline: true },
                    { name: 'üîπ Pr√≥ximo passo:', value: 'Clique em "Verificar" para receber seu cargo!', inline: false }
                )
                .setFooter({ text: 'Bem-vindo √† comunidade!' })
                .setTimestamp();

            const verifyButton = new ButtonBuilder()
                .setCustomId('registration_verify')
                .setLabel('‚úÖ Verificar')
                .setStyle(ButtonStyle.Success);

            const row = new ActionRowBuilder().addComponents(verifyButton);

            await interaction.update({
                embeds: [embed],
                components: [row]
            });

        } catch (error) {
            console.error('Erro ao confirmar registro:', error);
            await interaction.reply({
                content: '‚ùå Erro ao processar seu registro. Tente novamente!',
                ephemeral: true
            });
        }
    },

    // Verificar usu√°rio e dar cargo
    async verifyUser(interaction) {
        const user = interaction.user;
        const member = interaction.member;

        try {
            // Verificar se est√° registrado
            const userData = database.getUser(user.id);
            if (!userData || !userData.registered) {
                return interaction.reply({
                    content: '‚ùå Voc√™ precisa se registrar primeiro!',
                    ephemeral: true
                });
            }

            // Verificar se j√° tem o cargo
            const verifiedRole = interaction.guild.roles.cache.find(role => 
                role.name === config.MODERATION.VERIFIED_ROLE
            );

            if (!verifiedRole) {
                return interaction.reply({
                    content: `‚ùå Cargo "${config.MODERATION.VERIFIED_ROLE}" n√£o encontrado! Contate um administrador.`,
                    ephemeral: true
                });
            }

            if (member.roles.cache.has(verifiedRole.id)) {
                return interaction.reply({
                    content: '‚úÖ Voc√™ j√° possui o cargo de verificado!',
                    ephemeral: true
                });
            }

            // Adicionar cargo
            await member.roles.add(verifiedRole);

            // Atualizar dados do usu√°rio
            userData.verified = true;
            userData.verificationDate = Date.now();
            database.saveUser(user.id, userData);

            const embed = new EmbedBuilder()
                .setColor(config.COLORS.SUCCESS)
                .setTitle('üéä Verifica√ß√£o Conclu√≠da!')
                .setDescription(`${user}, voc√™ foi verificado com sucesso!`)
                .addFields(
                    { name: 'üîπ Cargo recebido:', value: verifiedRole.name, inline: true },
                    { name: 'üîπ Status:', value: 'Verificado ‚úÖ', inline: true },
                    { name: 'üîπ Acesso:', value: 'Agora voc√™ tem acesso completo ao servidor!', inline: false }
                )
                .setFooter({ text: 'Aproveite sua estadia na comunidade!' })
                .setTimestamp();

            await interaction.update({
                embeds: [embed],
                components: []
            });

        } catch (error) {
            console.error('Erro ao verificar usu√°rio:', error);
            await interaction.reply({
                content: '‚ùå Erro ao processar sua verifica√ß√£o. Contate um administrador!',
                ephemeral: true
            });
        }
    },

    // Mostrar regras
    async showRules(interaction) {
        const embed = new EmbedBuilder()
            .setColor(config.COLORS.INFO)
            .setTitle('üìú Regras do Servidor')
            .setDescription('Por favor, leia e respeite todas as regras:')
            .addFields(
                { name: '1Ô∏è‚É£ Respeito', value: 'Trate todos com respeito e cordialidade', inline: false },
                { name: '2Ô∏è‚É£ Sem Spam', value: 'N√£o fa√ßa spam ou flood nos canais', inline: false },
                { name: '3Ô∏è‚É£ Conte√∫do Apropriado', value: 'Mantenha o conte√∫do apropriado para todas as idades', inline: false },
                { name: '4Ô∏è‚É£ Sem Ofensas', value: 'Proibido xingamentos, ofensas ou discrimina√ß√£o', inline: false },
                { name: '5Ô∏è‚É£ Use os Canais Corretos', value: 'Utilize cada canal para seu prop√≥sito espec√≠fico', inline: false },
                { name: '6Ô∏è‚É£ Siga os ToS', value: 'Respeite os Termos de Servi√ßo do Discord', inline: false }
            )
            .setFooter({ text: 'O descumprimento das regras resultar√° em puni√ß√µes!' })
            .setTimestamp();

        const backButton = new ButtonBuilder()
            .setCustomId('registration_back')
            .setLabel('üîô Voltar')
            .setStyle(ButtonStyle.Secondary);

        const registerButton = new ButtonBuilder()
            .setCustomId('registration_start')
            .setLabel('üìù Registrar')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(backButton, registerButton);

        await interaction.reply({
            embeds: [embed],
            components: [row],
            ephemeral: true
        });
    },

    // Cancelar registro
    async cancelRegistration(interaction) {
        const embed = new EmbedBuilder()
            .setColor(config.COLORS.ERROR)
            .setTitle('‚ùå Registro Cancelado')
            .setDescription('Seu processo de registro foi cancelado.')
            .addFields(
                { name: 'üîÑ Tentar novamente:', value: 'Voc√™ pode iniciar o registro a qualquer momento clicando no bot√£o correspondente.', inline: false }
            )
            .setFooter({ text: 'Esperamos voc√™ de volta!' })
            .setTimestamp();

        await interaction.update({
            embeds: [embed],
            components: []
        });
    }
};
